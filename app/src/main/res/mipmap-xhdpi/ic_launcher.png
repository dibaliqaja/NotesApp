package com.iqbal.mymoviecatalogue4.database;

import androidx.room.DatabaseConfiguration;
import androidx.room.InvalidationTracker;
import androidx.room.RoomOpenHelper;
import androidx.room.RoomOpenHelper.Delegate;
import androidx.room.util.TableInfo;
import androidx.room.util.TableInfo.Column;
import androidx.room.util.TableInfo.ForeignKey;
import androidx.room.util.TableInfo.Index;
import androidx.sqlite.db.SupportSQLiteDatabase;
import androidx.sqlite.db.SupportSQLiteOpenHelper;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Callback;
import androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration;
import java.lang.IllegalStateException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.HashSet;

@SuppressWarnings("unchecked")
public final class AppDatabase_Impl extends AppDatabase {
  private volatile FavoriteDAO _favoriteDAO;

  @Override
  protected SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration configuration) {
    final SupportSQLiteOpenHelper.Callback _openCallback = new RoomOpenHelper(configuration, new RoomOpenHelper.Delegate(1) {
      @Override
      public void createAllTables(SupportSQLiteDatabase _db) {
        _db.execSQL("CREATE TABLE IF NOT EXISTS `tbFavorite` (`id` INTEGER NOT NULL, `title` TEXT, `date` TEXT, `rating` REAL, `poster` TEXT, `overview` TEXT, `isMovie` INTEGER NOT NULL, PRIMARY KEY(`id`))");
        _db.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
        _db.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, \"1fd5d00acfedc1c6f44b6b9f5d3cdaef\")");
      }

      @Override
      public void dropAllTables(SupportSQLiteDatabase _db) {
        _db.execSQL("DROP TABLE IF EXISTS `tbFavorite`");
      }

      @Override
      protected void onCreate(SupportSQLiteDatabase _db) {
        if (mCallbacks != null) {
          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
            mCallbacks.get(_i).onCreate(_db);
          }
        }
      }

      @Override
      public void onOpen(SupportSQLiteDatabase _db) {
        mDatabase = _db;
        internalInitInvalidationTracker(_db);
        if (mCallbacks != null) {
          for (int _i = 0, _size = mCallbacks.size(); _i < _size; _i++) {
            mCallbacks.get(_i).onOpen(_db);
          }
        }
      }

      @Override
      protected void validateMigration(SupportSQLiteDatabase _db) {
        final HashMap<String, TableInfo.Column> _columnsTbFavorite = new HashMap<String, TableInfo.Column>(7);
        _columnsTbFavorite.put("id", new TableInfo.Column("id", "INTEGER", true, 1));
        _columnsTbFavorite.put("title", new TableInfo.Column("title", "TEXT", false, 0));
        _columnsTbFavorite.put("date", new TableInfo.Column("date", "TEXT", false, 0));
        _columnsTbFavorite.put("rating", new TableInfo.Column("rating", "REAL", false, 0));
        _columnsTbFavorite.put("poster", new TableInfo.Column("poster", "TEXT", false, 0));
        _columnsTbFavorite.put("overview", new TableInfo.Column("overview", "TEXT", false, 0));
        _columnsTbFavorite.put("isMovie", new TableInfo.Column("isMovie", "INTEGER", true, 0));
        final HashSet<TableInfo.ForeignKey> _foreignKeysTbFavorite = new HashSet<TableInfo.ForeignKey>(0);
        final HashSet<TableInfo.Index> _indicesTbFavorite = new HashSet<TableInfo.Index>(0);
        final TableInfo _infoTbFavorite = new TableInfo("tbFavorite", _columnsTbFavorite, _foreignKeysTbFavorite, _indicesTbFavorite);
        final TableInfo _existingTbFavorite = TableInfo.read(_db, "tbFavorite");
        if (! _infoTbFavorite.equals(_existingTbFavorite)) {
          throw new IllegalStateException("Migration didn't properly handle tbFavorite(com.iqbal.mymoviecatalogue4.favorite.Favorite).\n"
                  + " Expected:\n" + _infoTbFavorite + "\n"
                  + " Found:\n" + _existingTbFavorite);
        }
      }
    }, "1fd5d00acfedc1c6f44b6b9f5d3cdaef", "3bdbb1ab91ac1a3524ec8c5b0e95c36f");
    final SupportSQLiteOpenHelper.Configuration _sqliteConfig = SupportSQLiteOpenHelper.Configuration.builder(configuration.context)
        .name(configuration.name)
        .callback(_openCallback)
        .build();
    final SupportSQLiteOpenHelper _helper = configuration.sqliteOpenHelperFactory.create(_sqliteConfig);
    return _helper;
  }

  @Override
  protected InvalidationTracker creat